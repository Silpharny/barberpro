// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       String  @id @default(uuid())
  name     String
  email    String
  address  String?
  password String

  stripe_customer_id String?

  created_at    DateTime?     @default(now())
  updated_at    DateTime?     @default(now())
  subscriptions Subscription?
  haircuts      Haircut[] // 1 user pode ter v√°rios modelos de cortes 
  Service       Service[]

  @@map("users")
}

model Subscription {
  id      String @id
  status  String
  priceId String

  created_at DateTime? @default(now())
  updated_at DateTime? @default(now())
  userId     String    @unique
  user       User      @relation(fields: [userId], references: [id])

  @@map("subscriptions")
}

model Haircut {
  id     String  @id @default(uuid())
  name   String
  price  Float
  status Boolean @default(true)

  created_at DateTime? @default(now())
  updated_at DateTime? @default(now())
  userId     String    @unique
  user       User      @relation(fields: [userId], references: [id])
  Service    Service[]

  @@map("haircuts")
}

model Service {
  id       String @id @default(uuid())
  customer String

  created_at DateTime? @default(now())
  updated_at DateTime? @default(now())
  haircutId  String
  haircut    Haircut   @relation(fields: [haircutId], references: [id])

  userId String
  user   User   @relation(fields: [userId], references: [id])

  @@map("services")
}
